import type { Message } from 'grammy/types'
import type { Other } from '@grammyjs/hydrate'

import type { Context } from '#root/bot/context.js'

import { safeAsync } from '#root/shared/safe-async/safe-async.js'

export function safeReply(ctx: Context) {
  return async (
    text: string,
    other?: Other<'sendMessage', 'chat_id' | 'text'>,
    errorMessage?: string,
  ): Promise<Message.TextMessage | null> => {
    if (!errorMessage) {
      errorMessage = ctx.t('errors-something-went-wrong')
    }
    const [error, sentMessage] = await safeAsync(ctx.reply(text, other))

    if (error) {
      ctx.logger.error({ error }, errorMessage)
      const [, fallbackMessage] = await safeAsync(ctx.reply(errorMessage))
      return fallbackMessage
    }

    return sentMessage
  }
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ `ctx.reply`, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—â–∞—è –≤—ã–±—Ä–æ—Å –æ—à–∏–±–æ–∫ –∏
 * –ª–æ–≥–∏—Ä—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
 *
 * üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ `ctx.reply`, –æ—Å–æ–±–µ–Ω–Ω–æ
 * –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç `reply_markup` (inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã,
 * –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ —Ç. –ø.), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞–¥–µ–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö Telegram API.
 *
 * –ï—Å–ª–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ—à–∏–±–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ª–æ–≥–∏—Ä—É–µ—Ç –µ—ë
 * —á–µ—Ä–µ–∑ `ctx.logger.error` –∏ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback-—Å–æ–æ–±—â–µ–Ω–∏–µ
 * (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ `errors-something-went-wrong`).
 *
 * @param {Context} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Grammy, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ö—ç–Ω–¥–ª–µ—Ä.
 * @returns {(text: string, other?: Other<'sendMessage', 'chat_id' | 'text'>, errorMessage?: string) => Promise<Message.TextMessage | null>}
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ `null` –ø—Ä–∏ –æ—à–∏–±–∫–µ.
 *
 * @example
 * const reply = safeReply(ctx)
 * await reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', {
 *   reply_markup: {
 *     inline_keyboard: [
 *       [{ text: '–î–∞', callback_data: 'yes' }],
 *       [{ text: '–ù–µ—Ç', callback_data: 'no' }],
 *     ],
 *   },
 * })
 */
export type SafeReply = ReturnType<typeof safeReply>
